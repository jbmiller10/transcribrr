name: Run Tests

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.12']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        enable-cache: true
        cache-dependency-glob: "uv.lock"
    
    - name: Set up Python ${{ matrix.python-version }}
      run: uv python install ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        uv sync --frozen --no-install-project
        uv pip install -e .
    
    - name: Run unit tests
      env:
        QT_QPA_PLATFORM: offscreen
        PYTHONPATH: ${{ github.workspace }}
      run: |
        echo "Running tests with Python ${{ matrix.python-version }}"
        # Run entire unittest suite discovered under app/tests
        uv run python -m unittest discover -v
        echo "\nTest suite completed successfully!"
    
    - name: Run linting
      if: matrix.python-version == '3.11'
      run: |
        uv run flake8 app --count --select=E9,F63,F7,F82 --show-source --statistics
        uv run flake8 app --count --exit-zero --max-complexity=10 --max-line-length=100 --statistics
    
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          *.log
          test-results/
        retention-days: 7

  package_macos:
    # Run packaging only on tag pushes like v1.2.3 or manual dispatch
    if: github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags/v')
    runs-on: macos-latest
    needs: test
    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Set up Python 3.11
        run: uv python install 3.11

      - name: Install build tooling (briefcase)
        run: |
          uv sync --extra build --extra gui --no-install-project

      - name: Generate Briefcase wrapper package
        run: |
          mkdir -p transcribrr
          printf "" > transcribrr/__init__.py
          cat > transcribrr/app.py << 'PY'
          def main():
              from app.__main__ import main as real_main
              return real_main()
          PY

      - name: Build macOS app (Briefcase)
        env:
          PYTHONUTF8: "1"
        run: |
          uv run briefcase create macOS
          uv run briefcase build macOS
          uv run briefcase package macOS

      - name: Locate artifacts
        run: |
          echo "DMGs found:"
          find dist -type f -name "*.dmg" -print || true

      - name: Upload macOS DMG artifact
        uses: actions/upload-artifact@v4
        with:
          name: transcribrr-macos-dmg
          path: |
            dist/**/*.dmg
          retention-days: 7
