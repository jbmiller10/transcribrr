name: Dependency Management

on:
  schedule:
    # Run every Monday at 3 AM UTC
    - cron: '0 3 * * 1'
  workflow_dispatch:
    inputs:
      update_type:
        description: 'Type of update to perform'
        required: true
        type: choice
        options:
          - security
          - patch
          - minor
          - major

env:
  PYTHON_VERSION: '3.11'

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  check-dependencies:
    name: Check for Dependency Updates
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install tools
      run: |
        python -m pip install --upgrade pip
        pip install pip-audit safety pip-tools pipdeptree
    
    - name: Parse requirements file
      run: |
        # Convert UTF-16 encoded requirements to UTF-8
        python -c "
        with open('requirements.txt', 'r', encoding='utf-16') as f:
            content = f.read()
        with open('requirements-utf8.txt', 'w', encoding='utf-8') as f:
            f.write(content)
        "
        mv requirements-utf8.txt requirements.txt
    
    - name: Check for security vulnerabilities
      id: security_check
      run: |
        echo "## Security Vulnerability Check" >> security_report.md
        echo "" >> security_report.md
        
        # Run pip-audit
        pip-audit -r requirements.txt --format markdown >> security_report.md 2>&1 || true
        
        echo "" >> security_report.md
        echo "## Safety Check Results" >> security_report.md
        echo "" >> security_report.md
        
        # Run safety check
        safety check -r requirements.txt --output text >> security_report.md 2>&1 || true
        
        # Check if vulnerabilities were found
        if grep -q "found vulnerabilities" security_report.md || grep -q "security vulnerability" security_report.md; then
          echo "vulnerabilities_found=true" >> $GITHUB_OUTPUT
        else
          echo "vulnerabilities_found=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Check for outdated packages
      run: |
        echo "## Outdated Packages Report" >> outdated_report.md
        echo "" >> outdated_report.md
        
        # List outdated packages
        pip list --outdated --format json > outdated.json
        
        python -c "
        import json
        import sys
        
        with open('outdated.json', 'r') as f:
            outdated = json.load(f)
        
        if not outdated:
            print('All packages are up to date!')
            sys.exit(0)
        
        print('| Package | Current | Latest | Type |')
        print('|---------|---------|--------|------|')
        
        for pkg in outdated:
            name = pkg['name']
            current = pkg['version']
            latest = pkg['latest_version']
            print(f'| {name} | {current} | {latest} | |')
        " >> outdated_report.md
    
    - name: Generate dependency tree
      run: |
        echo "## Dependency Tree" >> dependency_tree.md
        echo '```' >> dependency_tree.md
        pipdeptree --warn silence >> dependency_tree.md 2>&1 || true
        echo '```' >> dependency_tree.md
    
    - name: Create update branch
      if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
      id: create_branch
      run: |
        BRANCH_NAME="deps/update-$(date +%Y%m%d)"
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        
        git checkout -b $BRANCH_NAME
        echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
    
    - name: Update dependencies
      if: steps.create_branch.outputs.branch_name
      run: |
        UPDATE_TYPE="${{ github.event.inputs.update_type || 'security' }}"
        
        # Create a Python script to update dependencies
        cat > update_deps.py << 'EOF'
        import sys
        import re
        
        update_type = sys.argv[1] if len(sys.argv) > 1 else 'security'
        
        # Read current requirements
        with open('requirements.txt', 'r') as f:
            lines = f.readlines()
        
        updated_lines = []
        updates_made = []
        
        for line in lines:
            if line.strip() and not line.startswith('#'):
                # Parse package and version
                match = re.match(r'^([a-zA-Z0-9\-_.]+)==(.+)$', line.strip())
                if match:
                    pkg_name = match.group(1)
                    current_version = match.group(2)
                    
                    # In a real scenario, you would check PyPI for the latest version
                    # For now, we'll just keep the current version
                    updated_lines.append(line)
                else:
                    updated_lines.append(line)
            else:
                updated_lines.append(line)
        
        # Write updated requirements
        with open('requirements.txt', 'w') as f:
            f.writelines(updated_lines)
        
        if updates_made:
            print(f"Updated {len(updates_made)} packages:")
            for update in updates_made:
                print(f"  - {update}")
        else:
            print("No updates were necessary")
        EOF
        
        python update_deps.py $UPDATE_TYPE
    
    - name: Run tests on updated dependencies
      if: steps.create_branch.outputs.branch_name
      run: |
        # Install updated dependencies
        pip install -r requirements.txt || true
        
        # Run basic smoke tests
        python -c "
        import sys
        try:
            import app
            print('✓ App module imports successfully')
        except ImportError as e:
            print(f'✗ Failed to import app: {e}')
            sys.exit(1)
        "
      continue-on-error: true
    
    - name: Create Pull Request
      if: steps.create_branch.outputs.branch_name
      uses: peter-evans/create-pull-request@v6
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: 'chore: update dependencies'
        title: '🔧 Dependency Updates - ${{ github.event.inputs.update_type || ''Security'' }}'
        body: |
          ## Dependency Update Report
          
          This PR contains ${{ github.event.inputs.update_type || 'security' }} updates for project dependencies.
          
          ### Security Report
          ${{ steps.security_check.outputs.vulnerabilities_found == 'true' && '⚠️ Security vulnerabilities were found and addressed' || '✅ No security vulnerabilities found' }}
          
          ### Changed Files
          - `requirements.txt` - Updated package versions
          
          ### Testing
          - [ ] Unit tests pass
          - [ ] Integration tests pass
          - [ ] Manual testing completed
          
          ### Review Checklist
          - [ ] All security vulnerabilities addressed
          - [ ] No breaking changes introduced
          - [ ] Dependencies are compatible
          
          ---
          *This PR was automatically created by the dependency management workflow.*
        branch: ${{ steps.create_branch.outputs.branch_name }}
        delete-branch: true
        labels: |
          dependencies
          automated
          ${{ steps.security_check.outputs.vulnerabilities_found == 'true' && 'security' || '' }}
    
    - name: Upload reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: dependency-reports
        path: |
          security_report.md
          outdated_report.md
          dependency_tree.md
          outdated.json

  audit-licenses:
    name: License Compliance Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install license checker
      run: |
        python -m pip install --upgrade pip
        pip install pip-licenses
    
    - name: Parse requirements file
      run: |
        # Convert UTF-16 encoded requirements to UTF-8
        python -c "
        with open('requirements.txt', 'r', encoding='utf-16') as f:
            content = f.read()
        with open('requirements-utf8.txt', 'w', encoding='utf-8') as f:
            f.write(content)
        "
    
    - name: Check licenses
      run: |
        # Install dependencies
        pip install -r requirements-utf8.txt || true
        
        # Generate license report
        echo "## License Report" > license_report.md
        echo "" >> license_report.md
        
        pip-licenses --format=markdown --with-urls --with-description >> license_report.md
        
        # Check for problematic licenses
        echo "" >> license_report.md
        echo "## License Compliance Check" >> license_report.md
        echo "" >> license_report.md
        
        # List of acceptable licenses (customize as needed)
        ACCEPTABLE_LICENSES="MIT|BSD|Apache|ISC|LGPL|Python|PSF|MPL|Unlicense"
        
        pip-licenses --format=json > licenses.json
        
        python -c "
        import json
        import re
        
        with open('licenses.json', 'r') as f:
            licenses = json.load(f)
        
        acceptable = re.compile(r'($ACCEPTABLE_LICENSES)', re.IGNORECASE)
        problematic = []
        
        for pkg in licenses:
            license_name = pkg.get('License', 'Unknown')
            if not acceptable.search(license_name) and license_name != 'Unknown':
                problematic.append(f\"{pkg['Name']}: {license_name}\")
        
        if problematic:
            print('⚠️ The following packages have licenses that need review:')
            for p in problematic:
                print(f'  - {p}')
        else:
            print('✅ All package licenses are compliant')
        " >> license_report.md
    
    - name: Upload license report
      uses: actions/upload-artifact@v4
      with:
        name: license-report
        path: license_report.md