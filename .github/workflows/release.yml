name: Release Pipeline

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.1)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        type: boolean
        default: false

env:
  PYTHON_VERSION: '3.11'

jobs:
  build-and-test:
    name: Build and Test Release
    runs-on: ${{ matrix.os }}
    timeout-minutes: 45
    
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            artifact_name: transcribrr-linux
            briefcase_platform: linux
          - os: macos-latest
            artifact_name: transcribrr-macos
            briefcase_platform: macOS
          - os: windows-latest
            artifact_name: transcribrr-windows
            briefcase_platform: windows
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for version detection
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Get version
      id: version
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION=${GITHUB_REF#refs/tags/v}
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Building version: $VERSION"
      shell: bash
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-release-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-release-
          ${{ runner.os }}-pip-
    
    - name: Install system dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          python3-dev \
          libgirepository1.0-dev \
          libcairo2-dev \
          pkg-config \
          gir1.2-gtk-3.0 \
          libgtk-3-dev \
          libwebkit2gtk-4.0-dev
    
    - name: Install system dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install cairo pango gdk-pixbuf gtk+3
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install briefcase cookiecutter
        
        # Parse requirements.txt properly
        python -c "
        with open('requirements.txt', 'r', encoding='utf-16') as f:
            lines = f.readlines()
        with open('requirements-clean.txt', 'w') as f:
            for line in lines:
                line = line.strip()
                if line and not line.startswith('#'):
                    f.write(line + '\n')
        "
        
        # Install cleaned requirements
        pip install -r requirements-clean.txt || echo "Some dependencies failed to install"
    
    - name: Update version in pyproject.toml
      run: |
        python -c "
        import toml
        
        with open('pyproject.toml', 'r') as f:
            config = toml.load(f)
        
        config['project']['version'] = '${{ steps.version.outputs.version }}'
        
        with open('pyproject.toml', 'w') as f:
            toml.dump(config, f)
        
        print(f'Updated version to: ${{ steps.version.outputs.version }}')
        "
    
    - name: Create application bundle
      run: |
        # Create the application bundle
        briefcase create ${{ matrix.briefcase_platform }} --no-input
        
        # Build the application
        briefcase build ${{ matrix.briefcase_platform }} --no-input
        
        # Package the application
        briefcase package ${{ matrix.briefcase_platform }} --no-input
      continue-on-error: true
    
    - name: Create fallback archive (if briefcase fails)
      if: failure()
      run: |
        # Create a distributable archive even if briefcase fails
        mkdir -p dist
        
        if [ "${{ runner.os }}" == "Windows" ]; then
          # Windows: Create ZIP archive
          powershell Compress-Archive -Path app,icons,preset_prompts.json,README.md,LICENSE -DestinationPath dist/${{ matrix.artifact_name }}.zip
        else
          # Unix: Create tarball
          tar -czf dist/${{ matrix.artifact_name }}.tar.gz app icons preset_prompts.json README.md LICENSE
        fi
      shell: bash
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: |
          dist/
          build/
          *.dmg
          *.msi
          *.deb
          *.AppImage
          *.tar.gz
          *.zip

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: release-artifacts/
    
    - name: Get version
      id: version
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
          PRERELEASE="${{ github.event.inputs.prerelease }}"
        else
          VERSION=${GITHUB_REF#refs/tags/v}
          # Check if version contains alpha, beta, rc, etc.
          if echo "$VERSION" | grep -qE "(alpha|beta|rc|dev)"; then
            PRERELEASE="true"
          else
            PRERELEASE="false"
          fi
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "prerelease=$PRERELEASE" >> $GITHUB_OUTPUT
    
    - name: Generate release notes
      id: release_notes
      run: |
        cat > release_notes.md << 'EOF'
        # Transcribrr v${{ steps.version.outputs.version }}
        
        ## What's New
        
        This release includes improvements to transcription accuracy, performance enhancements, and bug fixes.
        
        ## Installation
        
        ### macOS
        Download the `.dmg` file and drag Transcribrr to your Applications folder.
        
        ### Windows
        Download and run the `.msi` installer.
        
        ### Linux
        Download the `.AppImage` file, make it executable, and run it.
        
        ## Requirements
        
        - Python 3.11 or higher
        - 4GB RAM minimum (8GB recommended)
        - Microphone access for live transcription
        
        ## Known Issues
        
        Please report any issues at https://github.com/${{ github.repository }}/issues
        
        ## Checksums
        
        ```
        EOF
        
        # Generate checksums for all artifacts
        find release-artifacts -type f \( -name "*.dmg" -o -name "*.msi" -o -name "*.deb" -o -name "*.AppImage" -o -name "*.tar.gz" -o -name "*.zip" \) -exec sha256sum {} \; >> release_notes.md
        
        echo '```' >> release_notes.md
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ steps.version.outputs.version }}
        name: Transcribrr v${{ steps.version.outputs.version }}
        body_path: release_notes.md
        prerelease: ${{ steps.version.outputs.prerelease }}
        draft: false
        files: |
          release-artifacts/**/*.dmg
          release-artifacts/**/*.msi
          release-artifacts/**/*.deb
          release-artifacts/**/*.AppImage
          release-artifacts/**/*.tar.gz
          release-artifacts/**/*.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  update-homebrew:
    name: Update Homebrew Formula (macOS)
    runs-on: ubuntu-latest
    needs: create-release
    if: github.event_name == 'push' && !contains(github.ref, 'beta') && !contains(github.ref, 'alpha')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Update Homebrew formula
      run: |
        echo "Homebrew formula update would go here"
        # This is a placeholder for Homebrew formula update
        # In a real scenario, you would:
        # 1. Clone your homebrew tap repository
        # 2. Update the formula with new version and SHA256
        # 3. Create a PR or push directly
      continue-on-error: true