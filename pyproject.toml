[project]
name = "transcribrr"
version = "1.0.0"
description = "Speech-to-text transcription tool with GPT-4 integration"
authors = [{ name = "John Miller", email = "john@johnbmiller.com" }]
readme = "README.md"
license = { file = "LICENSE" }
requires-python = ">=3.11"
dependencies = [
    # Core utilities (minimal dependencies for testing)
    "requests>=2.31.0",
    "python-dotenv>=1.0.0",
    "keyring>=24.0.0",
    "appdirs>=1.4.4",
    "psutil>=5.9.0",
    # Data processing
    "beautifulsoup4>=4.12.0",
    "pyyaml>=6.0",
    "colorlog>=6.8.0",
    "humanfriendly>=10.0",
    # API client
    "openai>=1.0.0",
    "pyqt6>=6.9.1",
]

[project.optional-dependencies]
gui = [
    "PyQt6>=6.5.0",
    "PyQt6-Qt6>=6.5.0",
]

audio = [
    "pyaudio>=0.2.11",
    "pydub>=0.25.1",
    "sounddevice>=0.5.1",
    "soundfile>=0.12.1",
]

ml = [
    "torch>=2.0.0",
    "torchaudio>=2.0.0",
    "transformers>=4.30.0",
    "pyannote.audio>=3.0.0",
    "faster-whisper>=1.1.0",
    "openai-whisper>=20231117",
]

docs = [
    "python-docx>=1.0.0",
    "htmldocx>=0.0.6",
]

dev = [
    "flake8>=7.0.0",
    "black>=24.0.0",
    "mypy>=1.9.0",
    "pytest>=8.0.0",
    "pytest-cov>=5.0.0",
    "pytest-qt>=4.4.0",
    "coverage>=7.4.0",
]

build = [
    "briefcase>=0.3.22",
    "pyinstaller>=6.0.0",
]

all = [
    "PyQt6>=6.5.0",
    "PyQt6-Qt6>=6.5.0",
    "pyaudio>=0.2.11",
    "pydub>=0.25.1",
    "sounddevice>=0.5.1",
    "soundfile>=0.12.1",
    "torch>=2.0.0",
    "torchaudio>=2.0.0",
    "transformers>=4.30.0",
    "pyannote.audio>=3.0.0",
    "faster-whisper>=1.1.0",
    "openai-whisper>=20231117",
    "python-docx>=1.0.0",
    "htmldocx>=0.0.6",
]

[project.scripts]
transcribrr = "app.__main__:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.uv]
dev-dependencies = [
    "flake8>=7.1.1",
    "black>=24.0.0",
    "mypy>=1.9.0",
    "pytest>=8.0.0",
    "pytest-cov>=5.0.0",
    "coverage>=7.4.0",
]

[[tool.uv.index]]
name = "pytorch-cu121"
url = "https://download.pytorch.org/whl/cu121"
explicit = true

[tool.uv.sources]
torch = { index = "pytorch-cu121" }
torchaudio = { index = "pytorch-cu121" }

[tool.hatch.build.targets.wheel]
packages = ["app"]
# Ensure static assets packaged inside the app wheel (fallback location)
include = [
  "app/icons/**",
]

[tool.black]
line-length = 100
target-version = ['py311']
include = '\.pyi?$'

[tool.flake8]
max-line-length = 100
extend-ignore = ["E203", "W503"]
exclude = [".git", "__pycache__", "build", "dist", ".venv"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
check_untyped_defs = true
no_implicit_optional = true
strict_optional = false

[[tool.mypy.overrides]]
module = [
    "appdirs",
    "pyannote.audio",
    "torchaudio",
    "pydub",
    "PyQt6.*",
    "transformers",
    "torch",
    "whisper",
    "faster_whisper",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "6.0"
testpaths = ["app/tests"]
python_files = "test_*.py"
addopts = "-v --tb=short"

[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/__init__.py",
    "*/test_*.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if __name__ == .__main__.:",
    "raise NotImplementedError",
    "pass",
    "except ImportError:",
]

# ---------------------------------------------------------------------------
# Briefcase packaging configuration (macOS)
# ---------------------------------------------------------------------------
[tool.briefcase]
project_name = "Transcribrr"
bundle = "com.transcribrr"
author = "John Miller"
author_email = "john@johnbmiller.com"

[tool.briefcase.app.transcribrr]
formal_name = "Transcribrr"
description = "Speech-to-text transcription tool"
sources = [
    "transcribrr",  # lightweight wrapper generated in CI
    "app",          # main application package
]
# Ensure app resources (icons, presets) are bundled crossâ€‘platform
resources = ["icons", "preset_prompts.json"]
# Keep core runtime libs minimal; heavy ML deps are intentionally excluded.
# Ensure GUI and core API clients are available at runtime.
requires = [
    "requests>=2.31.0",
    "python-dotenv>=1.0.0",
    "keyring>=24.0.0",
    "appdirs>=1.4.4",
    "psutil>=5.9.0",
    "beautifulsoup4>=4.12.0",
    "pyyaml>=6.0",
    "colorlog>=6.8.0",
    "humanfriendly>=10.0",
    "openai>=1.0.0",
    "moviepy>=1.0.3",
    "PyAudio>=0.2.11",
    "torch>=2.0.0",
    "torchaudio>=2.0.0",
    "transformers>=4.30.0",
    "safetensors>=0.4.2",
    "tokenizers>=0.14.0",
    "pydub>=0.25.1",
    "python-docx>=1.0.0",
    "htmldocx>=0.0.6",
    "PyQt6>=6.5.0",
    "PyQt6-Qt6>=6.5.0",
]

# Microphone access prompt string (macOS privacy usage)
permission.microphone = true

[tool.briefcase.app.transcribrr.macOS]

[tool.briefcase.app.transcribrr.macOS.app]
# Briefcase expects icon paths without extension; it appends .icns/.ico, etc.
icon = "icons/app/app_icon"
universal_build = false
info."NSMicrophoneUsageDescription" = "Transcribrr records audio so it can transcribe your speech."
requirement_installer_args = ["--find-links", "wheelhouse"]

# Use the same icon for the DMG installer (path without extension).
installer_icon = "icons/app/app_icon"
