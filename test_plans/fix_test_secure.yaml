target_file: "/home/john/transcribrr/app/secure.py"
test_file: "/home/john/transcribrr/app/tests/test_secure.py"

overview:
  current_issues:
    - "Excessive mocking of keyring module prevents testing actual keyring behavior"
    - "Tests verify mock calls rather than actual security functionality"
    - "Missing edge cases for regex patterns and boundary conditions"
    - "No tests for concurrent access to keyring operations"
    - "Insufficient error scenario coverage"
    - "Tests don't verify actual log filtering in realistic scenarios"
    - "No integration tests for complete security workflows"

  fix_strategy:
    - "Reduce mocking to only external dependencies that can't be tested"
    - "Use test doubles or in-memory implementations where possible"
    - "Focus on testing behavior and outcomes rather than implementation"
    - "Add comprehensive edge cases and error scenarios"
    - "Test actual regex behavior with realistic data"
    - "Verify security properties are maintained"

refactoring_plan:
  phase_1_reduce_mocking:
    - action: "Remove excessive keyring mocking"
      details:
        - "Create a TestKeyring class that implements keyring interface in-memory"
        - "Use monkey-patching to replace keyring module for tests"
        - "This allows testing actual logic without external dependencies"
      implementation: |
        class TestKeyring:
            def __init__(self):
                self.store = {}
            
            def get_password(self, service, username):
                return self.store.get(f"{service}:{username}")
            
            def set_password(self, service, username, password):
                self.store[f"{service}:{username}"] = password
            
            def delete_password(self, service, username):
                key = f"{service}:{username}"
                if key in self.store:
                    del self.store[key]
                else:
                    raise keyring.errors.PasswordDeleteError("Not found")

    - action: "Remove logger mocking where unnecessary"
      details:
        - "Use a TestHandler to capture log messages instead of mocking"
        - "This allows verifying actual log output"
      implementation: |
        class TestLogHandler(logging.Handler):
            def __init__(self):
                super().__init__()
                self.messages = []
            
            def emit(self, record):
                self.messages.append(self.format(record))

    - action: "Remove redact function mocking in tests that test other functions"
      details:
        - "Let the actual redact function run to test integration"
        - "Only mock external boundaries, not internal functions"

  phase_2_test_actual_behavior:
    - action: "Refactor TestRedactFunction to test regex behavior comprehensively"
      new_tests:
        - test_name: "test_redact_various_api_key_formats"
          description: "Test different valid API key formats"
          scenarios:
            - "OpenAI keys with different lengths (minimum and maximum)"
            - "HuggingFace tokens with various character combinations"
            - "Keys at start, middle, and end of text"
            - "Keys adjacent to punctuation"
            - "Keys in URLs and JSON strings"
        
        - test_name: "test_redact_performance_with_large_text"
          description: "Verify redaction doesn't have catastrophic backtracking"
          scenarios:
            - "Large text with many potential matches"
            - "Text with patterns that almost match but don't"
        
        - test_name: "test_redact_unicode_handling"
          description: "Test with various unicode characters"
          scenarios:
            - "Text with emojis around API keys"
            - "Multi-byte UTF-8 characters"
            - "RTL text with API keys"

    - action: "Refactor TestSensitiveLogFilter to test actual filtering"
      new_tests:
        - test_name: "test_filter_with_actual_logger"
          description: "Test filter with real logging infrastructure"
          implementation: |
            # Create a logger with the filter
            test_logger = logging.getLogger("test")
            handler = TestLogHandler()
            handler.addFilter(SensitiveLogFilter())
            test_logger.addHandler(handler)
            
            # Log messages with sensitive data
            test_logger.info("Key: sk-secretkey123456")
            
            # Verify the handler received redacted message
            assert "***-REDACTED-***" in handler.messages[0]
            assert "sk-secretkey" not in handler.messages[0]
        
        - test_name: "test_filter_with_formatted_messages"
          description: "Test with % and {} style formatting"
          scenarios:
            - "logger.info('Key: %s', api_key)"
            - "logger.info('Key: {}', api_key)"
            - "Mixed format strings"
        
        - test_name: "test_filter_thread_safety"
          description: "Test filter works correctly with concurrent logging"
          implementation: |
            # Use threading to log from multiple threads
            # Verify all messages are properly redacted

    - action: "Refactor TestMigrateApiKeys to test actual migration logic"
      new_tests:
        - test_name: "test_migrate_with_test_keyring"
          description: "Use TestKeyring to verify migration logic"
          implementation: |
            # Set up old keys in test keyring
            test_keyring = TestKeyring()
            test_keyring.set_password("transcription_application", "OPENAI_API_KEY", "old-key")
            
            # Run migration
            with patch('keyring', test_keyring):
                result = migrate_api_keys()
            
            # Verify keys moved to new location
            assert test_keyring.get_password("transcribrr-v1.0.0", "OPENAI_API_KEY") == "old-key"
            assert test_keyring.get_password("transcription_application", "OPENAI_API_KEY") is None
        
        - test_name: "test_migrate_handles_partial_failures"
          description: "Test when one key migrates but another fails"
          scenarios:
            - "OpenAI succeeds, HuggingFace fails"
            - "First key deleted but second key can't be set"
        
        - test_name: "test_migrate_atomic_behavior"
          description: "Verify migration doesn't lose keys on failure"
          scenarios:
            - "Set succeeds but delete fails - key should exist in both"
            - "Verify rollback behavior if implemented"

  phase_3_add_missing_coverage:
    - action: "Add edge cases for redact function"
      new_tests:
        - test_name: "test_redact_boundary_cases"
          cases:
            - "Empty string"
            - "Single character"
            - "Only whitespace"
            - "Very long string (1MB+)"
            - "String with null bytes"
            - "Binary data passed as string"
        
        - test_name: "test_redact_pattern_boundaries"
          cases:
            - "sk- followed by 9 chars (too short)"
            - "sk- followed by exactly 10 chars (minimum)"
            - "sk- followed by 100 chars (very long)"
            - "hf_ with special characters that shouldn't match"
            - "Multiple keys with overlapping patterns"
        
        - test_name: "test_redact_preserves_structure"
          cases:
            - "JSON with API keys - structure remains valid"
            - "XML with API keys - tags preserved"
            - "CSV with API keys - columns maintained"

    - action: "Add error scenarios for API key operations"
      new_tests:
        - test_name: "test_get_api_key_network_errors"
          scenarios:
            - "Keyring service unavailable"
            - "Timeout during retrieval"
            - "Corrupted keyring data"
        
        - test_name: "test_set_api_key_permission_errors"
          scenarios:
            - "No write access to keyring"
            - "Keyring locked by another process"
            - "Disk full during write"
        
        - test_name: "test_concurrent_api_key_operations"
          scenarios:
            - "Multiple threads setting same key"
            - "Read while another thread is writing"
            - "Delete while another thread is reading"

    - action: "Add security validation tests"
      new_tests:
        - test_name: "test_no_sensitive_data_in_exceptions"
          description: "Verify exceptions don't leak sensitive data"
          implementation: |
            # Force various exceptions and verify messages are redacted
            
        - test_name: "test_no_sensitive_data_in_memory"
          description: "Verify sensitive data is not kept in memory unnecessarily"
          implementation: |
            # Check that redacted strings don't keep references to original
            
        - test_name: "test_timing_attack_resistance"
          description: "Verify operations don't leak information via timing"

  phase_4_improve_test_structure:
    - action: "Split test classes by functionality"
      structure:
        - "TestRedactPatterns - Pattern matching tests"
        - "TestRedactPerformance - Performance and edge cases"
        - "TestLogFilterUnit - Unit tests for filter"
        - "TestLogFilterIntegration - Integration with logging"
        - "TestKeyringOperations - Basic keyring operations"
        - "TestKeyringMigration - Migration specific tests"
        - "TestSecurityProperties - Security validation"

    - action: "Add test fixtures and helpers"
      additions:
        - "create_test_keyring() - Factory for test keyring"
        - "assert_redacted() - Custom assertion for redaction"
        - "generate_api_keys() - Generate various test keys"
        - "setup_test_logger() - Configure logger for tests"

    - action: "Use parameterized tests where appropriate"
      implementation: |
        @parameterized.expand([
            ("sk-" + "a" * 10, True),  # Minimum length
            ("sk-" + "a" * 50, True),  # Normal length
            ("sk-" + "a" * 9, False),  # Too short
            ("hf_" + "b" * 10, True),  # HF token
            ("sk_invalid!", False),     # Invalid characters
        ])
        def test_api_key_detection(self, key, should_redact):
            result = redact(f"Key: {key}")
            if should_redact:
                self.assertIn("***-REDACTED-***", result)
            else:
                self.assertIn(key, result)

  phase_5_remove_anti_patterns:
    - action: "Remove implementation detail testing"
      changes:
        - "Don't test exact mock call counts unless critical"
        - "Don't verify internal state variables"
        - "Don't test constructor parameters"
        - "Focus on observable behavior"

    - action: "Remove generous leftovers"
      changes:
        - "Ensure each test is independent"
        - "No shared state between tests"
        - "Proper cleanup in tearDown"
        - "No module-level test data"

    - action: "Remove free ride anti-pattern"
      changes:
        - "One assertion per test method"
        - "Split combined tests into separate methods"
        - "Clear test names describing what is tested"

implementation_order:
  week_1:
    - "Create TestKeyring implementation"
    - "Remove excessive mocking from all test methods"
    - "Add missing edge cases for redact function"
    
  week_2:
    - "Refactor log filter tests to use actual logging"
    - "Add error scenario tests"
    - "Implement security validation tests"
    
  week_3:
    - "Split test classes by functionality"
    - "Add parameterized tests"
    - "Clean up remaining anti-patterns"
    - "Add performance tests"

expected_improvements:
  metrics:
    - "Reduce mock usage from ~80% to <20%"
    - "Increase test coverage of error paths from ~20% to >80%"
    - "Reduce test file size from 527 lines to ~400 lines (better organized)"
    - "Increase number of test cases from 31 to ~50 (more comprehensive)"
    - "Test execution time should remain under 2 seconds"
  
  quality:
    - "Tests will catch actual bugs, not just verify mocks"
    - "Security properties will be validated"
    - "Edge cases will be covered"
    - "Tests will be maintainable and clear"
    - "Integration between components will be tested"

validation_checklist:
  before_commit:
    - "[ ] All tests pass with no skips"
    - "[ ] Mock usage is minimal and justified"
    - "[ ] Each test has a clear, single purpose"
    - "[ ] Error scenarios are tested"
    - "[ ] Edge cases are covered"
    - "[ ] No test exceeds 20 lines"
    - "[ ] Test classes are focused and cohesive"
    - "[ ] Security properties are validated"
    - "[ ] Performance is acceptable"
    - "[ ] No anti-patterns remain"