target_file: "app/ThreadManager.py"
test_file: "app/tests/test_thread_manager.py"

# Issues identified from the audit report
identified_issues:
  - "Excessive mocking of weakref.ref preventing proper GC testing"
  - "Direct manipulation of private attributes (_active_threads, _instance)"
  - "Manual singleton reset prone to test pollution"
  - "Tests focus on implementation details rather than behavior"
  - "No error conditions or edge cases tested"
  - "Mocking prevents testing actual weak reference behavior"

# Anti-patterns to fix
anti_patterns_to_remove:
  mockery:
    - description: "Remove weakref.ref mocking that prevents actual garbage collection testing"
    - current_behavior: "Mocks weakref.ref entirely, preventing real weak reference behavior"
    - fix: "Use real weak references and test actual GC behavior with controlled object lifecycle"
    
  implementation_details:
    - description: "Stop testing private attributes and internal state"
    - current_behavior: "Direct access to _active_threads and _instance private attributes"
    - fix: "Test only through public API - register_thread, unregister_thread, get_active_threads"
    
  generous_leftovers:
    - description: "Fix singleton state pollution between tests"
    - current_behavior: "Manual reset of ThreadManager._instance in setUp/tearDown"
    - fix: "Create fresh test environment for each test without modifying class state"

# Test structure improvements
structural_improvements:
  - split_test_classes:
      description: "Break monolithic TestThreadManager into focused test classes"
      new_classes:
        - "TestThreadManagerSingleton - Test singleton pattern behavior"
        - "TestThreadRegistration - Test thread registration/unregistration"
        - "TestThreadCancellation - Test thread cancellation logic"
        - "TestThreadLifecycle - Test complete thread lifecycle"
        - "TestThreadManagerErrors - Test error conditions"
        
  - reduce_test_size:
      description: "Break large test methods into smaller, focused tests"
      target: "Each test method should be <20 lines"
      
  - improve_test_names:
      description: "Use descriptive names that explain what behavior is tested"
      example: "test_register_thread_success -> test_registers_thread_and_connects_finished_signal"

# Mocking reduction strategy
mocking_reduction:
  - use_real_objects:
      description: "Use real QThread subclasses instead of MagicMock"
      implementation: |
        Create minimal QThread subclass for testing:
        ```python
        class TestThread(QThread):
            def __init__(self):
                super().__init__()
                self.cancelled = False
                
            def cancel(self):
                self.cancelled = True
                
            def run(self):
                pass  # Minimal implementation
        ```
        
  - mock_only_boundaries:
      description: "Mock only external dependencies, not internal components"
      keep_mocked:
        - "Logger (for verifying log messages)"
        - "QThread.wait() return value (to simulate timeout)"
      stop_mocking:
        - "weakref.ref - use real weak references"
        - "QThread.finished signal - use real signal"
        - "QThread object - use real or minimal subclass"
        
  - test_real_behavior:
      description: "Test actual behavior instead of mock interactions"
      examples:
        - "Instead of verifying mock.assert_called_with(), verify thread is in active list"
        - "Instead of mocking weakref, test actual garbage collection"
        - "Instead of mocking finished signal, emit real signal and verify cleanup"

# Missing test scenarios to add
missing_test_coverage:
  error_conditions:
    - "Thread registration when thread.finished doesn't exist"
    - "Thread registration with None or invalid thread object"
    - "Unregister thread during active cancellation"
    - "Cancel thread that raises exception in isRunning()"
    - "Thread with broken wait() method"
    - "Concurrent registration/unregistration from multiple threads"
    
  edge_cases:
    - "Register same thread instance multiple times rapidly"
    - "Cancel threads with wait_timeout=0"
    - "Cancel threads with negative wait_timeout"
    - "Thread that completes between cancel() and wait()"
    - "Thread garbage collected during cancellation"
    - "Singleton access from multiple threads simultaneously"
    
  resource_management:
    - "Verify no memory leaks with weak references"
    - "Test cleanup when threads are forcefully terminated"
    - "Verify signal disconnection on thread deletion"
    - "Test behavior when thread manager is deleted"
    
  real_world_scenarios:
    - "Multiple threads finishing simultaneously"
    - "Thread that restarts after finishing"
    - "Thread hierarchy (parent/child threads)"
    - "Long-running thread cancellation"

# Implementation approach
implementation_steps:
  step_1:
    title: "Create test utilities and fixtures"
    tasks:
      - "Create TestThread class that extends QThread"
      - "Create fixtures for common test scenarios"
      - "Create helper methods for thread lifecycle management"
      
  step_2:
    title: "Refactor existing tests"
    tasks:
      - "Remove all weakref.ref mocking"
      - "Replace MagicMock threads with TestThread instances"
      - "Remove direct access to private attributes"
      - "Split large test methods"
      
  step_3:
    title: "Add missing test coverage"
    tasks:
      - "Add error condition tests"
      - "Add edge case tests"
      - "Add concurrent operation tests"
      - "Add resource management tests"
      
  step_4:
    title: "Improve test isolation"
    tasks:
      - "Remove singleton state manipulation"
      - "Ensure each test is independent"
      - "Add proper cleanup in tearDown"
      - "Verify no test pollution"

# Expected outcomes
expected_improvements:
  - "Tests validate actual ThreadManager behavior, not mock interactions"
  - "Weak reference and garbage collection behavior properly tested"
  - "All error conditions and edge cases covered"
  - "Test file reduced from 621 lines to ~400 lines"
  - "Tests are maintainable and not brittle to implementation changes"
  - "Clear test structure with focused test classes"
  - "No test pollution or state leakage between tests"

# Sample improved test
sample_improved_test: |
  ```python
  class TestThread(QThread):
      """Minimal QThread for testing."""
      def __init__(self):
          super().__init__()
          self.cancelled = False
          self.run_count = 0
          
      def cancel(self):
          self.cancelled = True
          
      def run(self):
          self.run_count += 1
  
  
  class TestThreadRegistration(unittest.TestCase):
      """Test thread registration and unregistration behavior."""
      
      def setUp(self):
          self.manager = ThreadManager.instance()
          # Clear active threads without touching singleton
          for thread in self.manager.get_active_threads():
              self.manager.unregister_thread(thread)
              
      def test_registers_thread_and_adds_to_active_list(self):
          """Test that registering a thread adds it to active threads."""
          thread = TestThread()
          initial_count = len(self.manager.get_active_threads())
          
          self.manager.register_thread(thread)
          
          active_threads = self.manager.get_active_threads()
          self.assertEqual(len(active_threads), initial_count + 1)
          self.assertIn(thread, active_threads)
          
      def test_auto_unregisters_when_thread_finishes(self):
          """Test that thread is automatically unregistered on finish."""
          thread = TestThread()
          self.manager.register_thread(thread)
          
          # Thread is registered
          self.assertIn(thread, self.manager.get_active_threads())
          
          # Emit finished signal
          thread.finished.emit()
          
          # Thread is automatically unregistered
          self.assertNotIn(thread, self.manager.get_active_threads())
          
      def test_handles_none_thread_gracefully(self):
          """Test that registering None doesn't crash."""
          with self.assertLogs(level='WARNING'):
              self.manager.register_thread(None)
          
          # Should not add None to active threads
          self.assertNotIn(None, self.manager.get_active_threads())
  ```

# Testing philosophy
testing_philosophy:
  - "Test behavior, not implementation"
  - "Use real objects whenever possible"
  - "Mock only at system boundaries"
  - "Each test should have a single clear purpose"
  - "Test names should describe the behavior being tested"
  - "Error conditions are as important as happy paths"
  - "Tests should be resilient to implementation changes"