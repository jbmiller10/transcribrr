target_file: "app/models/recording.py"
test_file: "app/tests/test_recording_model.py"
test_status: "KEEP WITH FIXES"
priority: "Low"

issues_identified:
  - "Missing edge cases for duration formatting (e.g., 0 duration, fractional seconds, very large durations)"
  - "Incomplete empty path validation testing"
  - "Missing boundary tests for file size estimation"
  - "No tests for whitespace-only filename validation"
  - "Missing edge cases for date format validation"

fixes_required:
  - category: "Duration Formatting Edge Cases"
    description: "Add comprehensive tests for _format_seconds helper function"
    test_cases:
      - test_name: "test_display_duration_edge_cases"
        description: "Test edge cases for duration display formatting"
        scenarios:
          - input: "duration=0.0"
            expected: "0:00"
            rationale: "Zero duration should display as 0:00"
          - input: "duration=0.9"
            expected: "0:00"
            rationale: "Fractional seconds should be floored"
          - input: "duration=59.999"
            expected: "0:59"
            rationale: "Just under a minute should floor to 59 seconds"
          - input: "duration=60.0"
            expected: "1:00"
            rationale: "Exactly one minute"
          - input: "duration=3599.999"
            expected: "59:59"
            rationale: "Just under an hour should not show hours"
          - input: "duration=3600.0"
            expected: "1:00:00"
            rationale: "Exactly one hour should switch to H:MM:SS format"
          - input: "duration=86399.999"
            expected: "23:59:59"
            rationale: "Just under 24 hours"
          - input: "duration=86400.0"
            expected: "24:00:00"
            rationale: "Exactly 24 hours"
          - input: "duration=359999.0"
            expected: "99:59:59"
            rationale: "Very large duration (99+ hours)"

  - category: "Path Validation Edge Cases"
    description: "Test comprehensive path validation scenarios"
    test_cases:
      - test_name: "test_file_path_validation_edge_cases"
        description: "Test edge cases for file path validation"
        scenarios:
          - input: "path=''"
            expected_error: "Invalid file path: empty"
            rationale: "Empty string should be rejected"
          - input: "path='   '"
            expected_error: "Invalid file path: empty"
            rationale: "Whitespace-only path should be rejected"
          - input: "path='\\t\\n'"
            expected_error: "Invalid file path: empty"
            rationale: "Tab and newline should be rejected"
          - input: "path='/valid/path/file.mp3'"
            expected: "No error"
            rationale: "Valid absolute path should be accepted"
          - input: "path='relative/path/file.mp3'"
            expected: "No error"
            rationale: "Valid relative path should be accepted"
          - input: "path='C:\\\\Windows\\\\file.mp3'"
            expected: "No error"
            rationale: "Valid Windows path should be accepted"
          - input: "path='/path/with/../traversal'"
            expected_error: "Invalid file path"
            rationale: "Path with .. should be rejected"
          - input: "path='..\\\\..\\\\windows\\\\system32'"
            expected_error: "Invalid file path"
            rationale: "Windows-style traversal should be rejected"

  - category: "Filename Validation Edge Cases"
    description: "Test whitespace and special character handling in filenames"
    test_cases:
      - test_name: "test_filename_validation_edge_cases"
        description: "Test edge cases for filename validation"
        scenarios:
          - input: "filename='   '"
            expected_error: "Filename cannot be empty"
            rationale: "Whitespace-only filename should be rejected"
          - input: "filename='\\t'"
            expected_error: "Filename cannot be empty"
            rationale: "Tab character should be rejected"
          - input: "filename='\\n'"
            expected_error: "Filename cannot be empty"
            rationale: "Newline character should be rejected"
          - input: "filename='  valid.mp3  '"
            expected: "No error (after strip, 'valid.mp3' remains)"
            rationale: "Leading/trailing whitespace should be handled"

  - category: "File Size Estimation Edge Cases"
    description: "Test boundary conditions for file size estimation"
    test_cases:
      - test_name: "test_file_size_estimation_edge_cases"
        description: "Test edge cases for file size estimation"
        scenarios:
          - input: "duration=0.0, bitrate=128"
            expected: "0 bytes"
            rationale: "Zero duration should yield zero size"
          - input: "duration=-10.0, bitrate=128"
            expected: "0 bytes"
            rationale: "Negative duration should be treated as zero"
          - input: "duration=1.0, bitrate=8"
            expected: "1000 bytes"
            rationale: "Minimum practical bitrate"
          - input: "duration=1.0, bitrate=320"
            expected: "40000 bytes"
            rationale: "High quality bitrate"
          - input: "duration=3600.0, bitrate=128"
            expected: "57600000 bytes"
            rationale: "One hour at standard bitrate"

  - category: "Date Format Validation Edge Cases"
    description: "Test additional date format scenarios"
    test_cases:
      - test_name: "test_date_format_validation_edge_cases"
        description: "Test edge cases for date format validation"
        scenarios:
          - input: "date='2024-13-01'"
            expected_error: "Invalid date format"
            rationale: "Invalid month should be rejected"
          - input: "date='2024-02-30'"
            expected_error: "Invalid date format"
            rationale: "Invalid day for February should be rejected"
          - input: "date='2024-12-31 25:00:00'"
            expected_error: "Invalid date format"
            rationale: "Invalid hour should be rejected"
          - input: "date='2024/01/15'"
            expected_error: "Invalid date format"
            rationale: "Wrong separator should be rejected"
          - input: "date='15-01-2024'"
            expected_error: "Invalid date format"
            rationale: "DD-MM-YYYY format should be rejected"
          - input: "date='2024-01-15T10:30:00'"
            expected_error: "Invalid date format"
            rationale: "ISO 8601 with T separator not supported"

  - category: "Recording Equality Edge Cases"
    description: "Test edge cases for Recording equality comparison"
    test_cases:
      - test_name: "test_recording_equality_edge_cases"
        description: "Test edge cases for __eq__ method"
        scenarios:
          - input: "Compare Recording with None"
            expected: "False (not equal)"
            rationale: "Recording should not equal None"
          - input: "Compare Recording with different type"
            expected: "False (not equal)"
            rationale: "Recording should not equal non-Recording objects"
          - input: "Compare Recording with same ID but different optional fields"
            expected: "True or False depending on implementation"
            rationale: "Verify equality is based on ID or all fields"

  - category: "Update Methods Edge Cases"
    description: "Test edge cases for update_transcript and update_processed_text"
    test_cases:
      - test_name: "test_update_methods_edge_cases"
        description: "Test edge cases for update methods"
        scenarios:
          - input: "update_transcript with empty string"
            expected: "raw_transcript='', transcribed_at is set"
            rationale: "Empty transcript might be valid"
          - input: "update_transcript called multiple times"
            expected: "Latest value and timestamp preserved"
            rationale: "Verify updates overwrite previous values"
          - input: "update_processed_text with None"
            expected: "TypeError or handled gracefully"
            rationale: "Verify None handling"

implementation_notes:
  - "All new test methods should be added to the existing TestRecordingModel class"
  - "Use self.assertAlmostEqual for floating point comparisons where appropriate"
  - "Group related edge case tests into single test methods with subtests or multiple assertions"
  - "Maintain consistent assertion message style with existing tests"
  - "Consider using unittest.subTest for parameterized test scenarios"
  - "Ensure test isolation - no test should depend on another test's state"

test_organization:
  - "Keep existing test structure intact"
  - "Add new edge case tests after existing tests"
  - "Group edge cases by functionality (duration, validation, etc.)"
  - "Use descriptive test method names that indicate what edge case is being tested"

estimated_effort: "1-2 hours"
test_count_increase: "Approximately 8-10 new test methods"
coverage_improvement: "Increase edge case coverage from ~80% to ~95%"